import { Actions, createEffect, ofType } from "@ngrx/effects";
import { DataService } from "src/app/Service/data.service";
import { addMovies, addMoviesSuccess, getMovies, getMoviesSuccess } from "../Actions/movie.action";
import { catchError, concatMap, exhaustMap, map, tap } from "rxjs/operators";
import { EmptyError } from "rxjs";
import { Injectable } from "@angular/core";
 
@Injectable()
export class MovieEffects {
    constructor(private action$: Actions, private ds: DataService) { }
    loadMovie$ = createEffect(() =>
        this.action$.pipe(
            ofType(getMovies),
            exhaustMap(() =>
                this.ds.getMovies().pipe(
                    map((movies) => getMoviesSuccess(movies)),
                  catchError(() => EmptyError)
                )
            )
        )
    )
    addMovie$=createEffect(()=>
    this.action$.pipe(
        ofType(addMovies),
        concatMap((movie)=>
        this.ds.addMovies(movie).pipe(
            map((movie)=> addMoviesSuccess({movie})),
            catchError(()=> EmptyError)
        )
        )

    ))
}


--------

import { createReducer, on } from '@ngrx/store';
import { Movie } from 'src/app/Models/movie';
import { addMovies, addMoviesSuccess, getMovies, getMoviesSuccess } from '../Actions/movie.action';

export interface MovieState {
  movies: ReadonlyArray<Movie>;
}

const initialState: ReadonlyArray<Movie> = [];

export const movieReducer = createReducer(
  initialState,
  on(getMoviesSuccess,(state,{movies}) => [...movies]),
  on(addMoviesSuccess, (state, {movie}) => [...state, movie])
);

